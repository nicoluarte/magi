import numpy as np

class ant_colony:
    """ ant colony optimization algorithm
    n_ant = number of ants
    ph_evap = pheremone evaporation rate
    ph_deposit = pheremone deposit
    mat = matrix to optimize; 0 = not a possible neighbour
    ph_mat = the pheromone matrix"""
    def __init__(self, n_ants, n_iterations, ph_evap, ph_deposit, mat):
        self.n_ants = n_ants
        self.n_iterations = n_iterations
        self.ph_evap = ph_evap
        self.ph_deposit = ph_deposit
        self.mat = np.ma.masked_less(np.asarray(mat), np.inf)
        self.ph_mat = np.ones(self.mat.shape)*0.1*self.mat.mask
        self.cost_mat = np.zeros(self.mat.shape)

    def update_cost_matrix(self):
        # calculates the cost of each edge
        # x = pheremone of given edge
        # y = 1/distance
        p = lambda x, y: x * np.divide(1, y, out=np.zeros_like(x), where=y!=0)
        # pheromone(of edge) * distance(of edge) /
        # the sum of all (pheromone(of edge) * distance(of edge))
        # it returns a probability distribution over possible neighbours
        aux = np.sum(np.array(list(map(p, self.ph_mat, self.mat))), axis = 1, keepdims = True)
        self.cost_mat = np.array(list(map(p, self.ph_mat, self.mat))) / aux


## minitest
dist_mat = np.array([[np.inf, 2, 2, 5, 7],
                      [2, np.inf, 4, 8, 2],
                      [2, 4, np.inf, 1, 3],
                      [5, 8, 1, np.inf, 2],
                      [7, 2, 3, 2, np.inf]])
ant = ant_colony(0, 0, 0, 0, dist_mat)

